{
  "version": 3,
  "sources": ["../../yaid-js/crockford.ts", "../../yaid-js/yaid.ts", "../script.js"],
  "sourcesContent": [
    "/*\nCopyright (c) 2023 Hans van Leeuwen\nCopyright (c) Scott Cooper <scttcper@gmail.com>\nCopyright (c) 2016-2017 Linus Unneb√§ck\nMIT Licensed\nBased on www.npmjs.com/package/@ctrl/ts-base32\n*/\nconst alphabet = \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\";\n\nexport function base32Encode(\n\tbuffer: Uint8Array,\n\toptions: Partial<{ padding: boolean }> = {},\n): string {\n\tconst padding = options.padding;\n\tconst length = buffer.byteLength;\n\tconst view = new Uint8Array(buffer);\n\n\tlet bits = 0;\n\tlet value = 0;\n\tlet output = \"\";\n\n\tfor (let i = 0; i < length; i++) {\n\t\tvalue = (value << 8) | view[i];\n\t\tbits += 8;\n\n\t\twhile (bits >= 5) {\n\t\t\toutput += alphabet[(value >>> (bits - 5)) & 31];\n\t\t\tbits -= 5;\n\t\t}\n\t}\n\n\tif (bits > 0) {\n\t\toutput += alphabet[(value << (5 - bits)) & 31];\n\t}\n\n\tif (padding) {\n\t\twhile (output.length % 8 !== 0) {\n\t\t\toutput += \"=\";\n\t\t}\n\t}\n\n\treturn output;\n}\n\nfunction readChar(alphabet: string, char: string): number {\n\tconst idx = alphabet.indexOf(char);\n\n\tif (idx === -1) {\n\t\tthrow new Error(\"Invalid character found: \" + char);\n\t}\n\n\treturn idx;\n}\n\nexport function base32Decode(input: string): Uint8Array {\n\tconst { length } = input.toUpperCase().replace(/O/g, \"0\").replace(/[IL]/g, \"1\");\n\n\tlet bits = 0;\n\tlet value = 0;\n\n\tlet index = 0;\n\tconst output = new Uint8Array(((length * 5) / 8) | 0);\n\n\tfor (let i = 0; i < length; i++) {\n\t\tvalue = (value << 5) | readChar(alphabet, input[i]);\n\t\tbits += 5;\n\n\t\tif (bits >= 8) {\n\t\t\toutput[index++] = (value >>> (bits - 8)) & 255;\n\t\t\tbits -= 8;\n\t\t}\n\t}\n\n\treturn output;\n}\n\n/**\n * Turn a string of hexadecimal characters into an ArrayBuffer\n */\nexport function hexToArrayBuffer(hex: string): ArrayBufferLike {\n\tif (hex.length % 2 !== 0) {\n\t\tthrow new RangeError(\"Expected string to be an even number of characters\");\n\t}\n\n\tconst view = new Uint8Array(hex.length / 2);\n\n\tfor (let i = 0; i < hex.length; i += 2) {\n\t\tview[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n\t}\n\n\treturn view.buffer;\n}\n",
  "import { base32Encode, base32Decode } from \"./crockford.js\";\n\nconst TIME_BYTES = 5;\nconst DIFF_BYTES = 2;\nconst META_BYTES = 1;\n\nconst SIZE = TIME_BYTES + DIFF_BYTES + META_BYTES;\n\n// 1 for miliseconds, 10 for centiseconds, 1000 for seconds, etc.\nconst DEFIDER = 10;\n\nexport const MAX_TIMESTAMP = 1099511627775;\n\nconst c: Crypto = globalThis.crypto || crypto;\n\nexport class YAID {\n\tconstructor(private bytes = new Uint8Array(SIZE)) {\n\t\tif (bytes.byteLength != SIZE) {\n\t\t\tthrow new RangeError(\"bytes length must be \" + SIZE + \" not \" + bytes.byteLength);\n\t\t}\n\t}\n\n\tdifferentiator(): Uint8Array {\n\t\treturn this.bytes.slice(TIME_BYTES, TIME_BYTES + DIFF_BYTES);\n\t}\n\n\tsetDifferentiator(d: Uint8Array) {\n\t\tthis.bytes.set(d, TIME_BYTES);\n\t}\n\n\tmeta(): number {\n\t\treturn this.bytes[TIME_BYTES + DIFF_BYTES];\n\t}\n\n\t/**\n\t * Set meta data\n\t * @param number between 0 and 255\n\t */\n\tsetMeta(i: number) {\n\t\tif (i < 0 || i > 255) {\n\t\t\tthrow new RangeError(\"meta must be within 0-255\");\n\t\t}\n\t\tthis.bytes[TIME_BYTES + DIFF_BYTES] = i;\n\t}\n\n\ttime(): Date {\n\t\tconst ms = this.timestamp() * DEFIDER;\n\t\treturn new Date(ms);\n\t}\n\n\tsetTime(t: Date) {\n\t\tconst cs = t.getTime() / DEFIDER;\n\t\tthis.setTimestamp(cs);\n\t}\n\n\t/** Time as hundredth of a second since January 1, 1970 12:00:00 AM UTC */\n\ttimestamp(): number {\n\t\tlet number = 0;\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tnumber += this.bytes[i] * Math.pow(2, 8 * (4 - i));\n\t\t}\n\n\t\treturn number;\n\t}\n\n\t/** Set the time as hundredth of a second since January 1, 1970 12:00:00 AM UTC */\n\tsetTimestamp(t: number) {\n\t\tif (t > MAX_TIMESTAMP) {\n\t\t\tthrow new Error(\"timestamp must not be greater than \" + MAX_TIMESTAMP);\n\t\t}\n\t\tfor (let i = 0, j = 1; i < TIME_BYTES; i++, j *= 0x100) {\n\t\t\tthis.bytes[TIME_BYTES - 1 - i] = (t / j) & 0xff;\n\t\t}\n\t\t/*\n\t\tthis.bytes[0] = t >> 32;\n\t\tthis.bytes[1] = (t >> 24) & 255;\n\t\tthis.bytes[2] = (t >> 16) & 255;\n\t\tthis.bytes[3] = (t >> 8) & 255;\n\t\tthis.bytes[4] = t & 255;\n\t\t*/\n\t}\n\n\ttoBytes(): Uint8Array {\n\t\treturn this.bytes;\n\t}\n\n\ttoNumber(): number {\n\t\tlet value = 0;\n\t\tfor (let i = this.bytes.length - 1; i >= 0; i--) {\n\t\t\tvalue = value * 256 + this.bytes[i];\n\t\t}\n\t\treturn value;\n\t}\n\n\ttoString(): string {\n\t\treturn base32Encode(this.bytes);\n\t}\n}\n\n/**\n * New YAID\n * @param meta\n * @param time\n * @returns YAID\n */\nexport function New(meta?: number, time = new Date()): YAID {\n\tif (typeof meta === \"undefined\") {\n\t\tmeta = random(META_BYTES)[0];\n\t}\n\n\tconst y = new YAID();\n\ty.setTime(time);\n\ty.setDifferentiator(random(DIFF_BYTES));\n\ty.setMeta(meta);\n\n\treturn y;\n}\n\nexport function Parse(yaid: string): YAID {\n\tconst b = base32Decode(yaid);\n\treturn new YAID(b);\n}\n\n// Return n bytes of random data\nfunction random(n: number): Uint8Array {\n\tconst m = new Uint8Array(n);\n\treturn c.getRandomValues(m);\n}\n",
  "import { New, Parse } from \"../yaid-js/yaid.ts\";\n\nlet y = New();\n\nfunction showError(err) {\n\tif (err) {\n\t\tyaid.setAttribute(\"aria-invalid\", \"true\");\n\t\terrorBox.style.display = \"block\";\n\t\terrorBox.innerText = err;\n\t} else {\n\t\tyaid.setAttribute(\"aria-invalid\", \"false\");\n\t\terrorBox.style.display = \"none\";\n\t}\n}\n\nfunction updateInfo(y) {\n\t// Strip the last character to correctly format the date\n\tdate.value = y.time().toISOString().slice(0, -1);\n\tmeta.value = y.meta();\n\tbytes.value = \"[\" + y.bytes + \"]\";\n\tshowError();\n}\n\nwindow.update = function () {\n\ttry {\n\t\ty = Parse(yaid.value);\n\t\tupdateInfo(y);\n\t} catch (err) {\n\t\tshowError(err);\n\t}\n};\n\nwindow.updateId = function () {\n\ty.setMeta(meta.value);\n\ty.setTime(new Date(date.value));\n\tyaid.value = y;\n\tbytes.value = \"[\" + y.bytes + \"]\";\n};\n\nwindow.generate = function () {\n\ty = New();\n\tyaid.value = y;\n\tupdateInfo(y);\n};\n\ngenerate();\n"
  ],
  "mappings": "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",
  "debugId": "916F624D06616EF464756e2164756e21",
  "names": []
}